applySearchBoxFilters() {
  const searchTerm = this.searchInput?.toLowerCase() || '';

  this.fileGridFilteredData = this.fileOriginalData.filter((row: any) => {
    const metadataKeysWithChanges: Set<string> = new Set();
    let metadataMatch = false;

    // Step 1: Check metadata only if status is 'M'
    if (row.status === 'M' && Array.isArray(row.metadata)) {
      metadataMatch = row.metadata.some((metaItem: any) => {
        return Object.entries(metaItem).some(([key, entry]: [string, any]) => {
          if (entry?.new_value) {
            metadataKeysWithChanges.add(key);
            if (
              typeof entry.new_value === 'string' &&
              entry.new_value.toLowerCase().includes(searchTerm)
            ) {
              return true; // Match found in metadata new_value
            }
          }
          return false;
        });
      });
    }

    // Step 2: Top-level match â€” skip keys that have changed in metadata
    const topLevelMatch = Object.entries(row).some(([key, value]: [string, any]) => {
      return (
        !metadataKeysWithChanges.has(key) && // Only unchanged fields
        typeof value === 'string' &&
        value.toLowerCase().includes(searchTerm)
      );
    });

    // Step 3: Include the row if either match is true
    return topLevelMatch || metadataMatch;
  });
}
