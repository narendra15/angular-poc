import { Component, OnInit } from '@angular/core';
import { Chart } from 'chart.js';
import { DashboardService } from './services/dashboard.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  chart: any; // Chart.js instance
  dashboardData: any; // Store the fetched data

  constructor(private dashboardService: DashboardService) {}

  ngOnInit() {
    this.createDonutChart(); // Initialize the chart
    this.fetchDashboardData(); // Fetch data and dynamically update the chart
  }

  // Fetch Dashboard Data and Process It
  fetchDashboardData(): void {
    this.dashboardService.getData().subscribe({
      next: (data) => {
        this.dashboardData = data; // Store the raw data
        console.log(`Dashboard data is : ${JSON.stringify(data)}`);

        // Extract rows and process data for the chart
        const rows = data.user_workflow?.rows || [];
        const processedData = this.processData(rows);

        // Update the chart dynamically
        this.updateDonutChart(processedData);

        // Example: Access "Not Started" data for widgets
        console.log("Not Started Data:", this.filterByStatus(rows, 'notStarted'));
      },
      error: (err) => {
        console.error('Error fetching data:', err);
      }
    });
  }

  // Modular Filter for Status
  filterByStatus(rows: any[], statusType: string): any[] {
    switch (statusType) {
      case 'notStarted':
        // Exclude rows where wt_status is "assigned" or "approve"
        return rows.filter((row) => !["assigned", "approve"].includes(row.wt_status));
      case 'reAssign':
        return rows.filter((row) => row.wt_status === "assigned" && row.wt_to_role === "p");
      case 'submitted':
        return rows.filter((row) =>
          row.wt_status === "assigned" && ["r", "a", "b"].includes(row.wt_to_role)
        );
      case 'completed':
        return rows.filter((row) => row.wt_status === "approve");
      default:
        return [];
    }
  }

  // Process Data for Donut Chart
  processData(rows: any[]): { total: number; notStarted: number; reAssigned: number; submitted: number; completed: number } {
    // Use the modular filter logic for each status
    const notStarted = this.filterByStatus(rows, 'notStarted').length;
    const reAssigned = this.filterByStatus(rows, 'reAssign').length;
    const submitted = this.filterByStatus(rows, 'submitted').length;
    const completed = this.filterByStatus(rows, 'completed').length;

    // Total is the sum of all statuses
    const total = notStarted + reAssigned + submitted + completed;

    return { total, notStarted, reAssigned, submitted, completed };
  }

  // Create Donut Chart
  createDonutChart() {
    const ctx = document.getElementById('doughnutChart') as HTMLCanvasElement;

    this.chart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: ['Not started', 'Re-assign', 'Submitted', 'Completed'], // Chart labels
        datasets: [
          {
            label: 'Status',
            data: [0, 0, 0, 0], // Initial empty data
            backgroundColor: ['#ed1c24', '#2cbfc1', '#d07704', '#0bb224'], // Colors for each segment
            borderWidth: 0
          }
        ]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'right' // Legend position
          }
        }
      }
    });
  }

  // Update Donut Chart Dynamically
  updateDonutChart(processedData: { total: number; notStarted: number; reAssigned: number; submitted: number; completed: number }) {
    const newData = [
      processedData.notStarted,
      processedData.reAssigned,
      processedData.submitted,
      processedData.completed
    ];

    this.chart.data.datasets[0].data = newData; // Update the data array
    this.chart.update(); // Refresh the chart to reflect new data
  }
}
