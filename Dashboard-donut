import { Component, OnInit } from '@angular/core';
import { Chart } from 'chart.js';
import { DashboardService } from './services/dashboard.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  chart: any; // Chart.js instance
  dashboardData: any; // Store the fetched data

  constructor(private dashboardService: DashboardService) {}

  ngOnInit() {
    this.createDonutChart(); // Initialize the chart
    this.fetchDashboardData(); // Fetch data and dynamically update the chart
  }

  fetchDashboardData(): void {
    this.dashboardService.getData().subscribe({
      next: (data) => {
        console.log('Dashboard data fetched:', data);

        const userWorkflow = data?.user_workflow || {}; // Safely access user_workflow
        const rows = Array.isArray(userWorkflow.rows) ? userWorkflow.rows : [];
        console.log('Rows:', rows); // Log the rows array

        const processedData = this.processData(rows);
        console.log('Processed Data:', processedData); // Debug log

        // Ensure processedData is valid before updating the chart
        if (
          processedData &&
          typeof processedData === 'object' &&
          processedData.notStarted !== undefined
        ) {
          this.updateDonutChart(processedData);
        } else {
          console.error('Invalid processedData:', processedData);
        }
      },
      error: (err) => {
        console.error('Error fetching data:', err);
        alert('Failed to fetch dashboard data. Please try again later.');
      }
    });
  }

  processData(rows: any[]): { total: number; notStarted: number; reAssigned: number; submitted: number; completed: number } {
    if (!Array.isArray(rows)) {
      console.error('Invalid rows data:', rows);
      return { total: 0, notStarted: 0, reAssigned: 0, submitted: 0, completed: 0 };
    }

    // Apply filtering logic
    const notStarted = this.filterByStatus(rows, 'notStarted').length;
    const reAssigned = this.filterByStatus(rows, 'reAssign').length;
    const submitted = this.filterByStatus(rows, 'submitted').length;
    const completed = this.filterByStatus(rows, 'completed').length;

    // Total is the sum of all statuses
    const total = notStarted + reAssigned + submitted + completed;

    return { total, notStarted, reAssigned, submitted, completed };
  }

  filterByStatus(rows: any[], statusType: string): any[] {
    if (!Array.isArray(rows)) {
      console.error('Invalid rows passed to filterByStatus:', rows);
      return [];
    }

    switch (statusType) {
      case 'notStarted':
        return rows.filter((row) => !["assigned", "approve"].includes(row.wt_status));
      case 'reAssign':
        return rows.filter((row) => row.wt_status === "assigned" && row.wt_to_role === "p");
      case 'submitted':
        return rows.filter((row) =>
          row.wt_status === "assigned" && ["r", "a", "b"].includes(row.wt_to_role)
        );
      case 'completed':
        return rows.filter((row) => row.wt_status === "approve");
      default:
        return [];
    }
  }

  createDonutChart() {
    const ctx = document.getElementById('doughnutChart') as HTMLCanvasElement;

    this.chart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: ['Not started', 'Re-assign', 'Submitted', 'Completed'], // Chart labels
        datasets: [
          {
            label: 'Status',
            data: [0, 0, 0, 0], // Initial empty data
            backgroundColor: ['#ed1c24', '#2cbfc1', '#d07704', '#0bb224'], // Colors for each segment
            borderWidth: 0
          }
        ]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'right' // Legend position
          }
        }
      }
    });
  }

  updateDonutChart(processedData: { total: number; notStarted: number; reAssigned: number; submitted: number; completed: number }) {
    if (!processedData || typeof processedData !== 'object') {
      console.error('Invalid data passed to updateDonutChart:', processedData);
      return; // Exit if processedData is invalid
    }

    // Ensure all required keys are present
    const { notStarted, reAssigned, submitted, completed } = processedData;
    if (
      notStarted === undefined ||
      reAssigned === undefined ||
      submitted === undefined ||
      completed === undefined
    ) {
      console.error('Missing required properties in processedData:', processedData);
      return; // Exit if any key is missing
    }

    const newData = [notStarted, reAssigned, submitted, completed];

    // Update the chart
    console.log('Chart Data:', newData); // Log chart data
    this.chart.data.datasets[0].data = newData; // Update the data array
    this.chart.update(); // Refresh the chart
  }
}
