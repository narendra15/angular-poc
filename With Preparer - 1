processWithPreparerData(rows: any[]): any[] {
    if (!Array.isArray(rows)) {
        console.error('Invalid rows data for re-assigned processing:', rows);
        return [];
    }

    console.log("Processes with preparer", rows);

    // Step 1: Filter rows by status and valid roles
    const filteredRows = rows.filter(row => 
        (row.wt_status === 'assign' || row.wt_status === 'upload') &&
        ['R', 'A', 'B'].includes(row.wt_to_role)
    );

    // Step 2: Create a map to store the latest row per template ID
    const uniqueRowsMap = new Map<string, any>();

    filteredRows.forEach(row => {
        const templateId = row.wt_template_id;
        const existingRow = uniqueRowsMap.get(templateId);

        // Keep the latest record based on wt_ts
        if (!existingRow || new Date(row.wt_ts).getTime() > new Date(existingRow.wt_ts).getTime()) {
            uniqueRowsMap.set(templateId, row);
        }
    });

    // Step 3: Convert the map values to an array
    const uniqueRowsArray = Array.from(uniqueRowsMap.values());

    // Step 4: Process and transform final data
    const fromUserMap: { [key: string]: string } = {
        P: 'Preparer',
        R: 'Reviewer',
        A: 'Attestor',
        B: 'BP Team'
    };

    const processedData = uniqueRowsArray.map(row => {
        const fromUser = fromUserMap[row.wt_from_role] || row.wt_from_role;
        const toUser = fromUserMap[row.wt_to_role] || row.wt_to_role;

        let reviewer = '';
        let toUserRole = '';

        if (row.wt_to_role === 'P') {
            toUserRole = 'P';
            reviewer = row.wt_to_user;
        }

        if (row.wt_from_role === 'P') {
            reviewer = row.wt_from_user;
        }

        return {
            template: row.wt_template_id,
            reviewers: reviewer ? [reviewer] : [],
            dateTime: row.wt_ts,
            fromUser,
            toUser,
            toUserRole
        };
    });

    console.log('Processed Re-Assigned Data', processedData);
    return processedData;
}





//////



filterByStatus(rows: any[], statusType: string): any[] {
    if (!Array.isArray(rows)) {
        console.error('Invalid rows data:', rows);
        return [];
    }

    // Step 1: Filter records based on status type
    let filteredRows = [];
    
    switch (statusType) {
        case 'pendingReview':
            filteredRows = rows.filter(row =>
                row.wt_status === 'assign' && ['R'].includes(row.wt_to_role)
            );
            break;

        case 'withPreparer':
            filteredRows = rows.filter(row =>
                (row.wt_status === 'assign' || row.wt_status === 'upload') &&
                ['R', 'A', 'B'].includes(row.wt_to_role)
            );
            break;

        case 'submitted':
            filteredRows = rows.filter(row =>
                row.wt_status === 'assign' &&
                ['R', 'A', 'B'].includes(row.wt_to_role)
            );
            break;

        case 'completed':
            filteredRows = rows.filter(row =>
                row.wt_status === 'approve'
            );
            break;

        default:
            return [];
    }

    // Step 2: Keep only the latest record per `wt_template_id` based on `wt_ts`
    const latestRecordsMap = new Map<string, any>();

    filteredRows.forEach(row => {
        const templateId = row.wt_template_id;
        const existingRow = latestRecordsMap.get(templateId);

        // Retain the latest record based on `wt_ts`
        if (!existingRow || new Date(row.wt_ts).getTime() > new Date(existingRow.wt_ts).getTime()) {
            latestRecordsMap.set(templateId, row);
        }
    });

    return Array.from(latestRecordsMap.values());
}


///////// Attestor Pending Review ////////////////

processPendingReviewData(rows: any[]): any[] {
    if (!Array.isArray(rows)) {
        console.error('Invalid rows data for re-assigned processing:', rows);
        return [];
    }

    console.log("Before filtering unique templates: ", rows.length, rows);

    // Filter rows where wt_status is 'assign' and wt_to_role is 'A'
    const filteredRows = rows.filter(row => 
        row.wt_status === 'assign' && ['A'].includes(row.wt_to_role)
    );

    // Keep only the latest record per unique wt_template_id
    const latestRecordsMap = new Map<string, any>();

    filteredRows.forEach(row => {
        const templateId = row.wt_template_id;
        const existingRow = latestRecordsMap.get(templateId);

        // Store the row if it's the first occurrence OR has a later timestamp
        if (!existingRow || new Date(row.wt_ts).getTime() > new Date(existingRow.wt_ts).getTime()) {
            latestRecordsMap.set(templateId, row);
        }
    });

    // Convert map values back to array
    const uniqueFilteredRows = Array.from(latestRecordsMap.values());

    console.log("After filtering unique templates: ", uniqueFilteredRows.length, uniqueFilteredRows);

    // Map the final unique filtered records
    const reAssignedData = uniqueFilteredRows.map(row => {
        const fromUserMap: { [key: string]: string } = {
            P: 'Preparer',
            R: 'Reviewer',
            A: 'Attestor',
            B: 'BP Team'
        };

        const fromUser = fromUserMap[row.wt_from_role] || row.wt_from_role;
        const toUser = fromUserMap[row.wt_to_role] || row.wt_to_role;

        return {
            template: row.wt_template_id,
            comments: row.wt_notes || '',
            dateTime: row.wt_ts
        };
    });

    console.log("Processed Re-Assigned Data:", reAssignedData);
    return reAssignedData;
}


///// with preparer attestor - in attestor dashboard ///////

processWithPreparerData(rows: any[]): any[] {
    if (!Array.isArray(rows)) {
        console.error('Invalid rows data for re-assigned processing:', rows);
        return [];
    }

    console.log("Processes with preparer", rows);

    // Step 1: Filter records where status is 'assign' or 'upload'
    const filteredRows = rows.filter(row =>
        (row.wt_status === 'assign' || row.wt_status === 'upload') &&
        ['A', 'B'].includes(row.wt_to_role)
    );

    // Step 2: Group records by wt_template_id and select the latest by wt_ts
    const latestRecordsMap = new Map<string, any>();
    filteredRows.forEach(row => {
        const templateId = row.wt_template_id;
        if (!latestRecordsMap.has(templateId) || new Date(row.wt_ts) > new Date(latestRecordsMap.get(templateId).wt_ts)) {
            latestRecordsMap.set(templateId, row);
        }
    });

    // Step 3: Map the latest records to desired output format
    return Array.from(latestRecordsMap.values()).map(row => {
        let currentStage = 0;
        let toUser = "Preparer";
        let fromUser = "";

        if (row.wt_from_role === 'P' && row.wt_to_role === '') {
            fromUser = '-';
        }

        switch (row.wt_to_role) {
            case 'R':
                currentStage = 1;
                toUser = 'Reviewer';
                break;
            case 'A':
                currentStage = 2;
                toUser = 'Attestor';
                break;
            case 'B':
                currentStage = 3;
                toUser = 'BP Team';
                break;
            case 'P':
                currentStage = 0;
                toUser = 'Re-Assign';
                break;
        }

        if (row.wt_from_role === 'P' && row.wt_to_role === '') {
            currentStage = 0;
        }

        return {
            steps: [
                'VOS Captured',
                'Submitted for Review',
                'Submitted for Attestation',
                'Pending for Signoff'
            ],
            currentStage: currentStage,
            template: row.wt_template_id,
            comments: row.wt_notes || '', // Handle empty comments
            toUser: toUser,
            from_role: row.wt_from_role,
            dateTime: row.wt_ts,
            to_role: row.wt_to_role
        };
    });
}


/////////// Complated - attestor dashboard /////////////

processesCompletedData(rows: any[]): any[] {
    if (!Array.isArray(rows)) {
        console.error('Invalid rows data for completed processing:', rows);
        return [];
    }

    console.log("Processing completed widget data", rows);

    // Step 1: Filter records where status is 'approve'
    const filteredRows = rows.filter(row => row.wt_status === 'approve');

    // Step 2: Group records by wt_template_id and select the latest by wt_ts
    const latestRecordsMap = new Map<string, any>();
    filteredRows.forEach(row => {
        const templateId = row.wt_template_id;
        if (!latestRecordsMap.has(templateId) || new Date(row.wt_ts) > new Date(latestRecordsMap.get(templateId).wt_ts)) {
            latestRecordsMap.set(templateId, row);
        }
    });

    // Step 3: Map the latest records to desired output format
    const completedWidgetData = Array.from(latestRecordsMap.values()).map(row => ({
        template: row.wt_template_id,
        dateTimeCompleted: row.wt_ts
    }));

    console.log("Processed data for completed widget", completedWidgetData);
    return completedWidgetData;
}

