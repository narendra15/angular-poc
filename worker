// ---- PATCH: header validation (worker) ----
if (Array.isArray(headerArray) && Array.isArray(mappingHeader)) {
  // Build arrays of plain header strings
  const expected = mappingHeader
    .map((m: any) => String(m?.excelDisplayHeader ?? "").trim())
    .filter(Boolean);

  const uploaded = headerArray
    .map((h: any) => String(h ?? "").trim())
    .filter(Boolean);

  // Use Sets for clean diff (handles dupes)
  const expSet = new Set(expected);
  const upSet  = new Set(uploaded);

  const missingHeaders = [...expSet].filter(h => !upSet.has(h));   // expected but not found
  const extraHeaders   = [...upSet].filter(h => !expSet.has(h));   // found but not expected

  // Debug (leave temporarily)
  console.log('[hdr-check] expected:', [...expSet]);
  console.log('[hdr-check] uploaded:', [...upSet]);
  console.log('[hdr-check] missing :', missingHeaders);
  console.log('[hdr-check] extra   :', extraHeaders);

  const hasMismatch = missingHeaders.length > 0 || extraHeaders.length > 0;

  if (hasMismatch) {
    const messageLines: string[] = ['Invalid File', 'Found mismatch in column name(s):'];
    if (missingHeaders.length) messageLines.push(`Missing column(s): ${missingHeaders.join(', ')}`);
    if (extraHeaders.length)   messageLines.push(`Extra column(s): ${extraHeaders.join(', ')}`);

    const message =
      messageLines[0] + '\n' +
      messageLines.slice(1).join('\n');

    // Use self.postMessage in workers (avoids any scoping confusion)
    self.postMessage({
      error: true,
      // send both forms so UI can consume either
      message,            // string (with \n)
      messageLines        // array of lines
    });

    try { self.close(); } catch {}
    return; // IMPORTANT: stop further execution
  }

  console.log('âœ… Header validation passed');
}
