// ---- Header validation (worker) ----
if (Array.isArray(headerArray) && Array.isArray(mappingHeader)) {
  const norm = (v: any) => String(v ?? "").trim().toLowerCase();

  // expected headers come from mappingHeader[].excelDisplayHeader
  const expectedList = mappingHeader
    .map((o: any) => o?.excelDisplayHeader)
    .filter(Boolean)
    .map(norm);

  const uploadedList = headerArray.filter(Boolean).map(norm);

  const expected = new Set(expectedList);
  const uploaded = new Set(uploadedList);

  const missingHeaders = [...expected].filter(h => !uploaded.has(h));
  const extraHeaders   = [...uploaded].filter(h => !expected.has(h));

  // DEBUG (leave these for now)
  console.log('[hdr-check] expected:', [...expected]);
  console.log('[hdr-check] uploaded:', [...uploaded]);
  console.log('[hdr-check] missing :', missingHeaders);
  console.log('[hdr-check] extra   :', extraHeaders);

  const hasMismatch = missingHeaders.length > 0 || extraHeaders.length > 0;

  if (hasMismatch) {
    const parts: string[] = [];
    if (missingHeaders.length) parts.push(`Missing column(s): ${missingHeaders.join(', ')}`);
    if (extraHeaders.length)   parts.push(`Extra column(s): ${extraHeaders.join(', ')}`);

    postMessage({
      error: true,
      message: [
        'Invalid File',
        `Found mismatch in column name(s):\n${parts.join('\n')}`
      ]
    });

    close();   // IMPORTANT: stop the worker after posting
    return;    // ensure no further code runs
  }

  console.log('âœ… All headers match');
  // (continue normal flow or close())
}
