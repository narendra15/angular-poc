// right after headerArray is built
if (Array.isArray(headerArray) && Array.isArray(mappingHeader)) {
  const expected = mappingHeader
    .map((m: any) => String(m?.excelDisplayHeader ?? "").trim())
    .filter(Boolean);

  const uploaded = headerArray
    .map((h: any) => String(h ?? "").trim())
    .filter(Boolean);

  const expSet = new Set(expected);
  const upSet = new Set(uploaded);

  const missingHeaders = [...expSet].filter(h => !upSet.has(h));
  const extraHeaders = [...upSet].filter(h => !expSet.has(h));

  console.log("[hdr-check] expected:", [...expSet]);
  console.log("[hdr-check] uploaded:", [...upSet]);
  console.log("[hdr-check] missing :", missingHeaders);
  console.log("[hdr-check] extra   :", extraHeaders);

  // If either missing OR extra headers exist
  if (missingHeaders.length > 0 || extraHeaders.length > 0) {
    const messageLines: string[] = [
      "Invalid File",
      "Found mismatch in column name(s):"
    ];
    if (missingHeaders.length)
      messageLines.push(`Missing column(s): ${missingHeaders.join(", ")}`);
    if (extraHeaders.length)
      messageLines.push(`Extra column(s): ${extraHeaders.join(", ")}`);

    // Send single, final message and terminate worker
    self.postMessage({
      error: true,
      message: messageLines.join("\n"),
      messageLines,
    });

    // ðŸ’£ Stop further execution so other postMessages donâ€™t override
    self.close();
    return;
  }
}
