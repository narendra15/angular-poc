type Result = {
  year: number;
  month: string;
  isIncluded: "Y" | "N";
  ts: string | null;
};

function buildArray(
  current: string[],
  archive: string[]
): Result[] {
  const results: Result[] = [];
  const currentSet = new Set(current.map(d => d.split("|")[0].trim().split("T")[0]));

  const parse = (entry: string): { date: string; ts: string | null } => {
    const [datePart, tsPart] = entry.split("|").map(s => s.trim());
    return { date: datePart.split("T")[0], ts: tsPart ?? null };
  };

  // 1) Add all from current → Y
  for (const item of current) {
    const { date, ts } = parse(item);
    const [year, month] = date.split("-");
    results.push({ year: +year, month, isIncluded: "Y", ts });
  }

  // 2) Add archive ones not in current → N
  for (const item of archive) {
    const { date, ts } = parse(item);
    const [year, month] = date.split("-");
    if (!currentSet.has(date)) {
      results.push({ year: +year, month, isIncluded: "N", ts });
    }
  }

  return results;
}


.replace(/[‘’']/g, "")   // remove fancy/single quotes
  .replace(/^\[|\]$/g, "") // remove [ and ]
  .split(",")              // split by comma
  .map(s => s.trim());     // trim spaces
