import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

export interface Notes {
  dateTime: string;
  templateName: string;
  closeType: string;
  activity: string;
  user: string;
}

@Injectable({
  providedIn: 'root',
})
export class PrepNotesService {
  private apiUrl = 'http://rdh-srr-vos-nlb-ca1-sbx01-v1-feef730c17e134a.elb.ca-central-1.amazonaws.com/api/aurora/notes';

  constructor(private http: HttpClient) {}

  getActivityData(): Observable<Notes[]> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      map((response) =>
        response.map((item) => this.mapNotes(item))
      ),
      catchError(this.handleError)
    );
  }

  private mapNotes(item: any): Notes {
    const roleMap: Record<string, string> = { P: 'Preparer', R: 'Reviewer', A: 'Attestor' };

    const toRole = item.wt_to_role && roleMap[item.wt_to_role as 'P' | 'R' | 'A'] ? roleMap[item.wt_to_role] : '';
    const fromRole = item.wt_from_role && roleMap[item.wt_from_role as 'P' | 'R' | 'A'] ? roleMap[item.wt_from_role] : '';

    return {
      dateTime: this.formatDateTime(item.wt_ts), // Format the timestamp
      templateName: item.wt_template_id,
      closeType: this.getCloseType(item.wt_close_type),
      activity: this.mapActivity(item.wt_status, toRole, fromRole),
      user: item.wt_to_user || item.wt_from_user || '',
    };
  }

  private formatDateTime(timestamp: string): string {
    const date = new Date(timestamp);
    return date.toLocaleString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZone: 'America/New_York',
      hour12: false, // Use 24-hour format
    }) + ' EST';
  }

  private getCloseType(closeType: string): string {
    switch (closeType) {
      case 'P':
        return 'Preparer';
      case 'R':
        return 'Reviewer';
      case 'A':
        return 'Attestor';
      default:
        return 'Unknown';
    }
  }

  private mapActivity(status: string, toRole: string, fromRole: string): string {
    if (status === 'assign') {
      return `Assigned to ${toRole}`;
    } else if (status === 'email') {
      return `Email from ${fromRole}`;
    } else if (status === 'notes') {
      return 'Notes';
    }
    return status || '';
  }

  private handleError(error: HttpErrorResponse) {
    let errorMsg = 'An unknown error occurred!';
    if (error.error instanceof ErrorEvent) {
      errorMsg = `Client Error: ${error.error.message}`;
    } else {
      errorMsg = `Server Error: ${error.status} - ${error.message}`;
    }
    console.error('Error fetching data:', errorMsg);
    return throwError(() => new Error(errorMsg));
  }
}
