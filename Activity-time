import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

export interface ActivityTracker {
  dateTime: string;
  templateName: string;
  closeType: string;
  activity: string;
  user: string;
}

@Injectable({
  providedIn: 'root',
})
export class PrepActivityTrackerService {
  private apiUrl = 'YOUR_API_URL_HERE'; // Replace with actual API endpoint

  constructor(private http: HttpClient) {}

  getActivityData(): Observable<ActivityTracker[]> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      map((response) =>
        response.map((item) => this.mapActivityTracker(item))
      ),
      catchError(this.handleError)
    );
  }

  private mapActivityTracker(item: any): ActivityTracker {
    const roleMap: Record<string, string> = { P: 'Preparer', R: 'Reviewer', A: 'Attestor' };

    const toRole = item.wt_to_role && roleMap[item.wt_to_role as 'P' | 'R' | 'A'] ? roleMap[item.wt_to_role] : '';
    const fromRole = item.wt_from_role && roleMap[item.wt_from_role as 'P' | 'R' | 'A'] ? roleMap[item.wt_from_role] : '';

    return {
      dateTime: this.formatDateTime(item.wt_ts), // Format the timestamp here
      templateName: item.wt_template_id,
      closeType: item.wt_close_type,
      activity: this.mapActivity(item.wt_status, toRole, fromRole),
      user: item.wt_to_user || item.wt_from_user || '',
    };
  }

  private formatDateTime(timestamp: string): string {
    // Parse the ISO timestamp and format as 'Month DD, YYYY hh:mm:ss EST'
    const date = new Date(timestamp);
    return date.toLocaleString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZone: 'America/New_York', // Ensures EST timezone
      hour12: false, // Use 24-hour format
    }) + ' EST';
  }

  private mapActivity(status: string, toRole: string, fromRole: string): string {
    if (status === 'assign') {
      return `Assigned to ${toRole}`;
    } else if (status === 'email') {
      return `Email from ${fromRole}`;
    } else if (status === 'notes') {
      return 'Notes';
    }
    return status || '';
  }

  private handleError(error: HttpErrorResponse) {
    let errorMsg = 'An unknown error occurred!';
    if (error.error instanceof ErrorEvent) {
      errorMsg = `Client Error: ${error.error.message}`;
    } else {
      errorMsg = `Server Error: ${error.status} - ${error.message}`;
    }
    console.error('Error fetching data:', errorMsg);
    return throwError(() => new Error(errorMsg));
  }
}
