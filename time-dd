////////Pipe//////////////
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'formatTimestamp',
  standalone: true // This makes the pipe standalone
})
export class FormatTimestampPipe implements PipeTransform {
  transform(timestamp: string, selectedTimezone: string): string {
    const timezoneOffsets: { [key: string]: number } = {
      'EST': 0,
      'PST': -3,
      'MST': -2,
      'CST': -1,
      'AST': 1,
      'UTC': 5
    };

    const estDate = new Date(timestamp);
    const offsetInHours = timezoneOffsets[selectedTimezone] || 0;
    const convertedDate = new Date(estDate.getTime() + offsetInHours * 60 * 60 * 1000);

    return convertedDate.toLocaleString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZone: 'UTC',
      hour12: false
    }) + ` ${selectedTimezone}`;
  }
}
////////////////////////////////////////////
/////////////Header///////////////////

import { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { TimezoneService } from '../shared/services/timezone.service';
import { Timezones } from '../shared/enums/timezones.enum'; // Enum or array with timezone names and offsets

@Component({
  selector: 'app-header',
  standalone: true,
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css'],
  imports: [] // Import dependencies like CommonModule if needed
})
export class HeaderComponent implements OnInit {
  title = 'Security Reporting Repository';

  selectedTimezone: string = 'EST'; // Default timezone
  timezones = Timezones; // Assuming this is an array or enum for timezones
  isEmailVisible = false;

  constructor(private store: Store, private timezoneService: TimezoneService) {}

  ngOnInit(): void {
    this.store.select('currentTimezone').subscribe((value: string) => {
      this.selectedTimezone = value;
    });
  }

  onTimezoneSelect(timezone: string): void {
    this.selectedTimezone = timezone;

    // Dispatch the timezone to the store
    this.store.dispatch(setSelectedTimezone({ selectedTimezone: timezone }));

    // Update the backend about the selection
    this.timezoneService.setTimezone(timezone, '123'); // Replace '123' with dynamic user ID
  }

  toggleNotificationTray(): void {
    this.isEmailVisible = !this.isEmailVisible;
  }
}

/////////////////Header Html ////////////
<mat-menu #menu="matMenu">
      <button
        mat-menu-item
        *ngFor="let zone of timezones"
        (click)="onTimezoneSelect(zone.name)"
        [class.selected]="zone.name === selectedTimezone"
      >
        <span class="zoneName">{{ zone.name }}</span> ({{ zone.offset }})
      </button>
    </mat-menu>

///////////////////////////////////////////

/////////////Dashboard//////////////////


import { TimezoneService } from '../shared/services/timezone.service';
import { FormatTimestampPipe } from '../shared/pipes/format-timestamp.pipe';


timestamps = ['2024-12-01T01:42:00.000Z', '2025-01-01T12:00:00.000Z'];
  selectedTimezone: string = 'EST';

constructor(private timezoneService: TimezoneService) {}

  ngOnInit(): void {
    this.timezoneService.timezone$.subscribe((timezone) => {
      this.selectedTimezone = timezone;
    });
  }

<div *ngFor="let timestamp of timestamps">
  <span>{{ timestamp | formatTimestamp: selectedTimezone }}</span>
</div>


////////////////////////////////////////////////////////

/////////////Time Zone Service //////////////////////

import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class TimezoneService {
  private timezone = new BehaviorSubject<string>('UTC');
  timezone$ = this.timezone.asObservable();

  constructor(private http: HttpClient) {}

  setTimezone(newTimezone: string, userId: string): void {
    this.timezone.next(newTimezone);
    this.updateUserTimezone(newTimezone, userId);
  }

  private updateUserTimezone(newTimezone: string, userId: string): void {
    // Call the API to update the user's timezone
    const payload = { userId, timezone: newTimezone };
    this.http.post('/api/updateUserTimezone', payload).subscribe({
      next: () => console.log('Timezone updated successfully!'),
      error: (err) => console.error('Error updating timezone:', err),
    });
  }
}

