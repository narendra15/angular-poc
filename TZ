export class FormatTimestampPipe implements PipeTransform {
  selectedTimezone: string = 'America/New_York'; // default to EST/EDT

  constructor(private timezoneService: TimezoneService) {
    this.timezoneService.timezone$.subscribe(({ timezone }) => {
      // Expect values like 'America/New_York', 'America/Los_Angeles', 'UTC', etc.
      this.selectedTimezone = timezone;
    });
  }

  transform(timestamp: string): string {
    if (!timestamp) return 'Timestamp Not Available';

    // Step 1: Convert backend's EST-marked-as-UTC to real UTC by adding 5 hours
    const estDate = new Date(timestamp.endsWith('Z') ? timestamp : `${timestamp}Z`);
    const correctedUTC = new Date(estDate.getTime() + 5 * 60 * 60 * 1000);

    // Step 2: Format using selected timezone (auto-handles DST)
    const dateStr = new Intl.DateTimeFormat('en-US', {
      timeZone: this.selectedTimezone,
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    }).format(correctedUTC);

    const timeStr = new Intl.DateTimeFormat('en-US', {
      timeZone: this.selectedTimezone,
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    }).format(correctedUTC);

    const timeZoneAbbr = new Intl.DateTimeFormat('en-US', {
      timeZone: this.selectedTimezone,
      timeZoneName: 'short'
    }).formatToParts(correctedUTC).find(part => part.type === 'timeZoneName')?.value ?? this.selectedTimezone;

    return `${dateStr} @${timeStr} ${timeZoneAbbr}`;
  }
}


[
  { label: 'UTC (UTC)', value: 'UTC' },
  { label: 'AST (UTC-04:00)', value: 'America/Halifax' },
  { label: 'EST (UTC-05:00)', value: 'America/New_York' },
  { label: 'CST (UTC-06:00)', value: 'America/Chicago' },
  { label: 'MST (UTC-07:00)', value: 'America/Denver' },
  { label: 'PST (UTC-08:00)', value: 'America/Los_Angeles' }
]



 // âœ… Utility to check if the date is in DST in the given IANA zone
  private isDateInDST(date: Date, timeZone: string): boolean {
    const jan = new Intl.DateTimeFormat('en-US', {
      timeZone,
      timeZoneName: 'short'
    }).formatToParts(new Date(date.getFullYear(), 0, 1)).find(p => p.type === 'timeZoneName')?.value;

    const test = new Intl.DateTimeFormat('en-US', {
      timeZone,
      timeZoneName: 'short'
    }).formatToParts(date).find(p => p.type === 'timeZoneName')?.value;

    return jan !== test; // If abbreviation differs, it's DST (EDT instead of EST)
  }
