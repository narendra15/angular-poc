export function formatUserAppsObj(codes: string[]): UserAppsRolesObj {
  const userApps: UserAppsMap = {};

  codes.forEach((code) => {
    const parts = code.split('|');

    if (parts.length < 2) return; // skip LOGIN or bad values

    const appRaw = parts[0];
    const roleRaw = parts[1];

    if (!appRaw || !roleRaw) return;

    const app  = appRaw.toLowerCase();
    const role = roleRaw.toUpperCase();

    if (!userApps[app]) userApps[app] = { roles: [] };
    if (!userApps[app].roles.includes(role)) {
      userApps[app].roles.push(role);
    }
  });

  return { user_apps: userApps };
}




export function buildAppRoleCodes(codes: string[]): string[] {
  const result: string[] = [];

  codes.forEach(code => {
    // Expect format: "APPNAME | ROLE | URL"
    const parts = String(code).split('|').map(p => p.trim());
    if (parts.length < 3) return; // guard against bad values

    const [appRaw, roleRaw] = parts;
    if (!appRaw || !roleRaw) return;

    // Replace '-' with '_' in app name, preserve rest
    const app = appRaw.replace(/-/g, '_');
    const role = roleRaw.toUpperCase();

    result.push(`${app}-${role}`);
  });

  return result;
}




export function buildAppRoleCodes(codes: string[]): string[] {
  return codes
    .map((code) => {
      const parts = code.split('|');
      if (parts.length < 2) return null; // skip LOGIN

      const [appRaw, roleRaw] = parts;
      return `${appRaw.replace(/-/g, '_')}-${roleRaw.toUpperCase()}`;
    })
    .filter((x): x is string => x !== null);
}





export function buildAppRoleCodes(codes: string[]): string[] {
  return codes
    .map((code) => {
      const parts = code.split('|');

      // case 1: plain keyword (like "LOGIN")
      if (parts.length === 1) {
        return parts[0].trim();
      }

      // case 2: APP|ROLE|[optional URL]
      if (parts.length >= 2) {
        const [appRaw, roleRaw] = parts;
        return `${appRaw.replace(/-/g, '_')}-${roleRaw.toUpperCase()}`;
      }

      return null;
    })
    .filter((x): x is string => x !== null);
}


























Sep 25



type RoleEntry = { roles: string[] };
type UserAppsMap = Record<string, RoleEntry>;
interface UserAppsRolesObj { user_apps: UserAppsMap; }

export function formatUserAppsObj(codes: string[]): UserAppsRolesObj {
  const userApps: UserAppsMap = {};

  codes.forEach((code) => {
    if (!code) return;

    let app = '';
    let role = '';

    if (code.includes('|')) {
      // New format: APP | ROLE | [URL]
      const parts = code.split('|').map(p => p.trim());
      if (parts.length >= 2) {
        app = parts[0];
        role = parts[1];
      }
    } else if (code.includes('-')) {
      // Old format: APP-ROLE
      const parts = code.split('-').map(p => p.trim());
      if (parts.length >= 2) {
        role = parts.pop()!;               // last part is role
        app = parts.join('-');             // rest is app
      }
    } else {
      // plain keyword like LOGIN â†’ skip
      return;
    }

    if (!app || !role) return;

    const appKey = app.toLowerCase();
    const roleKey = role.toUpperCase();

    if (!userApps[appKey]) {
      userApps[appKey] = { roles: [] };
    }

    if (!userApps[appKey].roles.includes(roleKey)) {
      userApps[appKey].roles.push(roleKey);
    }
  });

  return { user_apps: userApps };
}

