export function formatUserAppsObj(codes: string[]): UserAppsRolesObj {
  const userApps: UserAppsMap = {};

  codes.forEach((code) => {
    const parts = code.split('|');

    if (parts.length < 2) return; // skip LOGIN or bad values

    const appRaw = parts[0];
    const roleRaw = parts[1];

    if (!appRaw || !roleRaw) return;

    const app  = appRaw.toLowerCase();
    const role = roleRaw.toUpperCase();

    if (!userApps[app]) userApps[app] = { roles: [] };
    if (!userApps[app].roles.includes(role)) {
      userApps[app].roles.push(role);
    }
  });

  return { user_apps: userApps };
}




export function buildAppRoleCodes(codes: string[]): string[] {
  const result: string[] = [];

  codes.forEach(code => {
    // Expect format: "APPNAME | ROLE | URL"
    const parts = String(code).split('|').map(p => p.trim());
    if (parts.length < 3) return; // guard against bad values

    const [appRaw, roleRaw] = parts;
    if (!appRaw || !roleRaw) return;

    // Replace '-' with '_' in app name, preserve rest
    const app = appRaw.replace(/-/g, '_');
    const role = roleRaw.toUpperCase();

    result.push(`${app}-${role}`);
  });

  return result;
}




export function buildAppRoleCodes(codes: string[]): string[] {
  return codes
    .map((code) => {
      const parts = code.split('|');
      if (parts.length < 2) return null; // skip LOGIN

      const [appRaw, roleRaw] = parts;
      return `${appRaw.replace(/-/g, '_')}-${roleRaw.toUpperCase()}`;
    })
    .filter((x): x is string => x !== null);
}
